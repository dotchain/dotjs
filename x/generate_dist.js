// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

"use strict";

const fs = require("fs");

const exported = [
  "Store",
  "Dict",
  "Seq",
  "Text",
  "Num",
  "Bool",
  "Null",
  "Ref",
  "Field",
  "Conn",
  "Transformer",
  "Stream",
  "DerivedStream",
  "MapIterator",
  "SeqIterator",
  "run",
  "field",
  "map",
  "filter"
];

function orderFiles() {
  const names = fs.readdirSync(__dirname + "/../db");
  const files = names.map(name => {
    return fs.readFileSync(__dirname + "/../db/" + name).toString();
  });
  const deps = {};

  for (let kk = 0; kk < names.length; kk++) {
    deps[names[kk]] = files[kk].match(/from ".\/(?<module>.*)"/g);
    if (deps[names[kk]]) {
      deps[names[kk]] = deps[names[kk]].map(s =>
        s.slice('from "./'.length, -1)
      );
    }
  }

  const ordered = [];
  const order = function(map, seen, current) {
    if (!current) {
      for (let key in map) {
        order(map, seen, key);
      }
      return ordered;
    }
    if (seen[current]) return;
    for (let dep of map[current] || []) {
      order(map, seen, dep);
    }
    ordered.push(current);
    seen[current] = true;
  };

  return order(deps, {}, null);
}

function main() {
  let names = orderFiles().filter(n => n != "index.js");

  let text = names
    .map(name => fs.readFileSync(__dirname + "/../db/" + name).toString())
    .map(text => {
      return text
        .replace(/^import.*$/gm, "")
        .replace(/export /g, "")
        .replace(/^\/\/.*$/gm, "")
        .replace(/^".*$/gm, "");
    })
    .join("");
  text += "\nmodule.exports = {" + exported.join(", ") + "}";
  fs.writeFileSync(__dirname + "/../dist/dotdb.js", preamble + text);
}

const preamble = `// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
// **** Code generated by dotjs/x/generate_dist.js ***

"use strict";
`;

main();
